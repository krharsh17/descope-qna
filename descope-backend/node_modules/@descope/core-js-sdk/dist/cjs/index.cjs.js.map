{"version":3,"file":"index.cjs.js","sources":["../../src/constants/apiPaths.ts","../../src/constants/index.ts","../../src/httpClient/helpers/createFetchLogger.ts","../../src/httpClient/types.ts","../../src/httpClient/urlBuilder.ts","../../src/httpClient/utils.ts","../../src/httpClient/index.ts","../../src/constants/httpStatusCodes.ts","../../src/sdk/helpers/index.ts","../../src/sdk/validations/core.ts","../../src/sdk/validations/validators.ts","../../src/sdk/validations/index.ts","../../src/sdk/accesskey.ts","../../src/sdk/types.ts","../../src/sdk/enchantedLink/validations.ts","../../src/sdk/enchantedLink/index.ts","../../src/sdk/flow/index.ts","../../src/sdk/magicLink/validations.ts","../../src/sdk/magicLink/index.ts","../../src/sdk/oauth/types.ts","../../src/sdk/oauth/index.ts","../../src/sdk/otp/index.ts","../../src/sdk/saml.ts","../../src/sdk/totp.ts","../../src/sdk/password/validations.ts","../../src/sdk/password/index.ts","../../src/sdk/webauthn.ts","../../src/sdk/index.ts","../../src/createSdk.ts","../../src/index.ts","../../src/utils/wrapWith/index.ts"],"sourcesContent":["/** API paths for the Descope service APIs */\nexport default {\n  accessKey: {\n    exchange: '/v1/auth/accesskey/exchange',\n  },\n  otp: {\n    verify: '/v1/auth/otp/verify',\n    signIn: '/v1/auth/otp/signin',\n    signUp: '/v1/auth/otp/signup',\n    update: {\n      email: '/v1/auth/otp/update/email',\n      phone: '/v1/auth/otp/update/phone',\n    },\n    signUpOrIn: '/v1/auth/otp/signup-in',\n  },\n  magicLink: {\n    verify: '/v1/auth/magiclink/verify',\n    signIn: '/v1/auth/magiclink/signin',\n    signUp: '/v1/auth/magiclink/signup',\n    update: {\n      email: '/v1/auth/magiclink/update/email',\n      phone: '/v1/auth/magiclink/update/phone',\n    },\n    signUpOrIn: '/v1/auth/magiclink/signup-in',\n  },\n  enchantedLink: {\n    verify: '/v1/auth/enchantedlink/verify',\n    signIn: '/v1/auth/enchantedlink/signin',\n    signUp: '/v1/auth/enchantedlink/signup',\n    session: '/v1/auth/enchantedlink/pending-session',\n    update: {\n      email: '/v1/auth/enchantedlink/update/email',\n    },\n    signUpOrIn: '/v1/auth/enchantedlink/signup-in',\n  },\n  oauth: {\n    start: '/v1/auth/oauth/authorize',\n    exchange: '/v1/auth/oauth/exchange',\n  },\n  saml: {\n    start: '/v1/auth/saml/authorize',\n    exchange: '/v1/auth/saml/exchange',\n  },\n  totp: {\n    verify: '/v1/auth/totp/verify',\n    signUp: '/v1/auth/totp/signup',\n    update: '/v1/auth/totp/update',\n  },\n  webauthn: {\n    signUp: {\n      start: '/v1/auth/webauthn/signup/start',\n      finish: '/v1/auth/webauthn/signup/finish',\n    },\n    signIn: {\n      start: '/v1/auth/webauthn/signin/start',\n      finish: '/v1/auth/webauthn/signin/finish',\n    },\n    signUpOrIn: {\n      start: '/v1/auth/webauthn/signup-in/start',\n    },\n    update: {\n      start: 'v1/auth/webauthn/update/start',\n      finish: '/v1/auth/webauthn/update/finish',\n    },\n  },\n  password: {\n    signUp: '/v1/auth/password/signup',\n    signIn: '/v1/auth/password/signin',\n    sendReset: '/v1/auth/password/reset',\n    update: '/v1/auth/password/update',\n    replace: '/v1/auth/password/replace',\n    policy: '/v1/auth/password/policy',\n  },\n  refresh: '/v1/auth/refresh',\n  selectTenant: '/v1/auth/tenant/select',\n  logout: '/v1/auth/logout',\n  logoutAll: '/v1/auth/logoutall',\n  me: '/v1/auth/me',\n  flow: {\n    start: '/v1/flow/start',\n    next: '/v1/flow/next',\n  },\n};\n","/** Default Descope API URL */\nexport const DEFAULT_BASE_API_URL = 'https://api.descope.com';\n\n/** Default magic link polling interval for checking if the user clicked on the magic link */\nexport const ENCHANTED_LINK_MIN_POLLING_INTERVAL_MS = 1000; // 1 second\n/** Default maximum time we are willing to wait for the magic link to be clicked */\nexport const ENCHANTED_LINK_MAX_POLLING_TIMEOUT_MS = 1000 * 60 * 10; // 10 minutes\n\n/** API paths to the Descope service */\nexport { default as apiPaths } from './apiPaths';\n","import { Logger } from '../../sdk/types';\nimport { Fetch } from '../types';\n\n/** Build a log message around HTTP calls  */\nconst httpLogBuilder = () => {\n  const msg: {\n    Title?: string;\n    Url?: string;\n    Method?: string;\n    Headers?: string;\n    Body?: string;\n    Status?: string;\n  } = {};\n\n  return {\n    headers(headers: HeadersInit) {\n      const headersObj =\n        typeof headers.entries === 'function'\n          ? Object.fromEntries(headers.entries())\n          : headers;\n      msg.Headers = JSON.stringify(headersObj);\n\n      return this;\n    },\n\n    body(body: string) {\n      msg.Body = body;\n      return this;\n    },\n\n    url(url: URL | string) {\n      msg.Url = url.toString();\n      return this;\n    },\n\n    method(method: string) {\n      msg.Method = method;\n      return this;\n    },\n\n    title(title: string) {\n      msg.Title = title;\n      return this;\n    },\n\n    status(status: string) {\n      msg.Status = status;\n      return this;\n    },\n\n    build() {\n      return Object.keys(msg)\n        .flatMap((key) =>\n          msg[key] ? [`${key !== 'Title' ? `${key}: ` : ''}${msg[key]}`] : []\n        )\n        .join('\\n');\n    },\n  };\n};\n\n/** Log the request object */\nconst buildRequestLog = (args: Parameters<Fetch>) =>\n  httpLogBuilder()\n    .title('Request')\n    .url(args[0])\n    .method(args[1].method)\n    .headers(args[1].headers)\n    .body(args[1].body)\n    .build();\n\n/** Log the response object */\nconst buildResponseLog = async (resp: Response) => {\n  const respBody = await resp.text();\n\n  return httpLogBuilder()\n    .title('Response')\n    .url(resp.url.toString())\n    .status(`${resp.status} ${resp.statusText}`)\n    .headers(resp.headers)\n    .body(respBody)\n    .build();\n};\n\nconst fetchWrapper =\n  (fetch: Fetch) =>\n  async (...args: Parameters<Fetch>) => {\n    const resp = await fetch(...args);\n\n    // we found out that cloning the response is problematic when using node fetch\n    // so instead, we are reading the body stream once and overriding the clone, text & json functions\n    const respText = await resp.text();\n\n    resp.text = () => Promise.resolve(respText);\n    resp.json = () => Promise.resolve(JSON.parse(respText));\n    resp.clone = () => resp;\n\n    return resp;\n  };\n\n/**\n * Create a fetch with a logger wrapped around it if a logger is given\n * @param logger Logger to send the logs to\n * @param receivedFetch Fetch to be used or built-in fetch if not provided\n *\n */\nconst createFetchLogger = (logger: Logger, receivedFetch?: Fetch) => {\n  const fetchInternal = fetchWrapper(receivedFetch || fetch);\n  if (!fetchInternal)\n    // eslint-disable-next-line no-console\n    logger?.warn(\n      'Fetch is not defined, you will not be able to send http requests, if you are running in a test, make sure fetch is defined globally'\n    );\n\n  if (!logger) return fetchInternal;\n  return async (...args: Parameters<Fetch>) => {\n    if (!fetchInternal)\n      throw Error(\n        'Cannot send http request, fetch is not defined, if you are running in a test, make sure fetch is defined globally'\n      );\n    logger.log(buildRequestLog(args));\n    const resp = await fetchInternal(...args);\n\n    logger[resp.ok ? 'log' : 'error'](await buildResponseLog(resp));\n\n    return resp;\n  };\n};\n\nexport default createFetchLogger;\n","import { Logger } from '../sdk/types';\n\n/** Request configuration including headers, query params and token */\ntype HttpClientReqConfig = {\n  headers?: HeadersInit;\n  queryParams?: { [key: string]: string };\n  token?: string;\n};\n\n/** HTTP methods we use in the client */\nexport enum HTTPMethods {\n  get = 'GET',\n  delete = 'DELETE',\n  post = 'POST',\n  put = 'PUT',\n}\n\n/** HTTP Client type that implements the HTTP method calls. Descopers can provide their own HTTP client although required only in rare cases. */\nexport type HttpClient = {\n  get: (path: string, config?: HttpClientReqConfig) => Promise<Response>;\n  post: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  put: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  delete: (path: string, config?: HttpClientReqConfig) => Promise<Response>;\n  hooks?: Hooks;\n};\n\nexport type Fetch = typeof fetch;\n\n/** Parameters for the HTTP client. Defaults should work for most cases. */\nexport type CreateHttpClientConfig = {\n  baseUrl: string;\n  projectId: string;\n  baseConfig?: { baseHeaders: HeadersInit };\n  logger?: Logger;\n  hooks?: Hooks;\n  cookiePolicy?: RequestCredentials | null;\n  fetch?: Fetch;\n};\n\n/** For before-request hook allows overriding parts of the request */\nexport type RequestConfig = {\n  path: string;\n  headers?: HeadersInit;\n  queryParams?: { [key: string]: string };\n  body?: any;\n  method: HTTPMethods;\n  token?: string;\n};\n\nexport type BeforeRequest = (config: RequestConfig) => RequestConfig;\nexport type AfterRequest = (\n  req: RequestConfig,\n  res: Response,\n) => void | Promise<void>;\n\n/** Hooks before and after the request is made */\nexport type Hooks = {\n  beforeRequest?: BeforeRequest;\n  afterRequest?: AfterRequest;\n};\n","/** Build URL with given parts */\nexport const urlBuilder = ({\n  path,\n  baseUrl,\n  queryParams,\n}: {\n  path: string;\n  baseUrl: string;\n  queryParams: ConstructorParameters<typeof URLSearchParams>[0];\n}) => {\n  const url = new URL(path, baseUrl);\n  if (queryParams) url.search = new URLSearchParams(queryParams).toString();\n\n  return url;\n};\n","/* eslint-disable no-nested-ternary */\n\nconst getSrcArr = (source: HeadersInit) => {\n  if (Array.isArray(source)) return source;\n  if (source instanceof Headers) return Array.from(source.entries());\n  if (!source) return [];\n  return Object.entries(source);\n};\n\n/** Merge the given list of headers into a single Headers object */\nexport const mergeHeaders = (...sources: HeadersInit[]) =>\n  new Headers(\n    sources.reduce((acc: Record<string, string>, source) => {\n      const srcArr = getSrcArr(source);\n      srcArr.reduce((_, [key, value]) => {\n        acc[key] = value;\n\n        return acc;\n      }, acc);\n\n      return acc;\n    }, {})\n  );\n\n/** Serialize the body to JSON */\nexport const serializeBody = (body: Record<string, any>) =>\n  body === undefined ? undefined : JSON.stringify(body);\n","import createFetchLogger from './helpers/createFetchLogger';\nimport {\n  CreateHttpClientConfig,\n  HttpClient,\n  HTTPMethods,\n  RequestConfig,\n} from './types';\nimport { urlBuilder } from './urlBuilder';\nimport { mergeHeaders, serializeBody } from './utils';\n\n/**\n * Create a Bearer authorization header with concatenated projectId and token\n * @param projectId The project id to use in the header\n * @param token Token to be concatenated. Defaults to empty.\n */\nconst createAuthorizationHeader = (projectId: string, token = '') => {\n  let bearer = projectId;\n  if (token) {\n    bearer = bearer + ':' + token;\n  }\n  return {\n    Authorization: `Bearer ${bearer}`,\n  };\n};\n\ndeclare const BUILD_VERSION: string;\n\n/**\n * Create descope custom headers\n */\nconst createDescopeHeaders = () => {\n  return {\n    'x-descope-sdk-name': 'core-js',\n    'x-descope-sdk-version': BUILD_VERSION,\n  };\n};\n\n/**\n * Create the HTTP client used to send HTTP requests to the Descope API\n *\n * @param CreateHttpClientConfig Configuration for the client\n */\nconst createHttpClient = ({\n  baseUrl,\n  projectId,\n  baseConfig,\n  logger,\n  hooks,\n  cookiePolicy,\n  fetch,\n}: CreateHttpClientConfig): HttpClient => {\n  const fetchWithLogger = createFetchLogger(logger, fetch);\n\n  const sendRequest = async (config: RequestConfig) => {\n    const requestConfig = hooks?.beforeRequest\n      ? hooks.beforeRequest(config)\n      : config;\n\n    const { path, body, headers, queryParams, method, token } = requestConfig;\n\n    const requestInit: RequestInit = {\n      headers: mergeHeaders(\n        createAuthorizationHeader(projectId, token),\n        createDescopeHeaders(),\n        baseConfig?.baseHeaders || {},\n        headers,\n      ),\n      method,\n      body: serializeBody(body),\n    };\n\n    // On edge runtimes like Cloudflare, the fetch implementation does not support credentials\n    // so we allow the caller to omit by specifying null\n    // See https://github.com/cloudflare/workerd/blob/main/src/workerd/api/http.h#L591\n    if (cookiePolicy !== null) {\n      requestInit.credentials = cookiePolicy || 'include';\n    }\n\n    const res = await fetchWithLogger(\n      urlBuilder({ path, baseUrl, queryParams }),\n      requestInit,\n    );\n\n    if (hooks?.afterRequest) {\n      await hooks.afterRequest(config, res?.clone());\n    }\n\n    return res;\n  };\n\n  return {\n    get: (path: string, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body: undefined,\n        method: HTTPMethods.get,\n        token,\n      }),\n    post: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.post,\n        token,\n      }),\n    put: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.put,\n        token,\n      }),\n    delete: (path, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body: undefined,\n        method: HTTPMethods.delete,\n        token,\n      }),\n    hooks,\n  };\n};\n\nexport default createHttpClient;\nexport type { HttpClient };\n","export default {\n  TOO_MANY_REQUESTS: 429,\n};\n","import jwtDecode, { JwtPayload } from 'jwt-decode';\nimport { ResponseData, SdkResponse } from '../types';\nimport HttpStatusCodes from '../../constants/httpStatusCodes';\n\nfunction getJwtAuthorizationItems(\n  token: string,\n  tenant: string,\n  claim: string\n): string[] {\n  let claims: any = parseJwt(token);\n  if (tenant) {\n    claims = claims?.tenants?.[tenant];\n  }\n  const items = claims?.[claim];\n  return Array.isArray(items) ? items : [];\n}\n\nfunction parseJwt(token: string): JwtPayload {\n  if (typeof token !== 'string' || !token)\n    throw new Error('Invalid token provided');\n  return jwtDecode(token);\n}\n\n/**\n * Checks if the given JWT is still valid but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function isJwtExpired(token: string): boolean {\n  const { exp } = parseJwt(token);\n  const currentTime = new Date().getTime() / 1000;\n  return currentTime > exp;\n}\n\n/**\n * Returns the list of tenants in the given JWT\n *\n * @param token JWT token\n */\nexport function getTenants(token: string): string[] {\n  let claims: any = parseJwt(token);\n  const items = Object.keys(claims?.tenants);\n  return Array.isArray(items) ? items : [];\n}\n\n/**\n * Returns the list of permissions granted in the given JWT but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function getJwtPermissions(token: string, tenant?: string): string[] {\n  return getJwtAuthorizationItems(token, tenant, 'permissions');\n}\n\n/**\n * Returns the list of roles specified in the given JWT but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function getJwtRoles(token: string, tenant?: string): string[] {\n  return getJwtAuthorizationItems(token, tenant, 'roles');\n}\n\n/** Joins path parts making sure there is only one path separator between parts */\nexport const pathJoin = (...args: string[]) =>\n  args.join('/').replace(/\\/{2,}/g, '/');\n\n/** Transform the Promise Response to our internal SdkResponse implementation\n * @param response The Response promise from fetch\n * @param transform Optionally transform the response JSON to another type\n */\nexport async function transformResponse<\n  T extends ResponseData,\n  S extends ResponseData = T\n>(\n  response: Promise<Response>,\n  transform?: (data: T) => S\n): Promise<SdkResponse<S>> {\n  const resp = await response;\n\n  const ret: SdkResponse<S> = {\n    code: resp.status,\n    ok: resp.ok,\n    response: resp,\n  };\n\n  const data = await resp.clone().json();\n\n  if (!resp.ok) {\n    ret.error = data;\n\n    if (resp.status === HttpStatusCodes.TOO_MANY_REQUESTS) {\n      Object.assign(ret.error, {\n        retryAfter: Number.parseInt(resp.headers?.get('retry-after')) || 0,\n      });\n    }\n  } else if (transform) {\n    ret.data = transform(data);\n  } else {\n    ret.data = <S>data;\n  }\n\n  return ret;\n}\n","import { Validator, ValidationRule, MakeValidator } from './types';\n\nexport const createValidator =\n  (rule: ValidationRule, defaultMsg?: string): MakeValidator =>\n  (msg = defaultMsg) =>\n  (val) =>\n    !rule(val) ? msg.replace('{val}', val) : false;\n\nexport const createOrValidator =\n  (validators: Validator[], defaultMsg?: string): MakeValidator =>\n  (msg = defaultMsg) =>\n  (val) => {\n    const errors = validators.filter((validator) => validator(val));\n\n    if (errors.length < validators.length) return false;\n\n    return msg ? msg.replace('{val}', val) : errors.join(' OR ');\n  };\n\nexport const createValidation = (...validators: Validator[]) => ({\n  validate: (val: any) => {\n    validators.forEach((validator) => {\n      const errMsg = validator(val);\n      if (errMsg) throw new Error(errMsg);\n    });\n\n    return true;\n  },\n});\n","import get from 'lodash.get';\nimport { createOrValidator, createValidation, createValidator } from './core';\nimport { Validator } from './types';\n\nconst regexMatch = (regex: RegExp) => (val: any) => regex.test(val);\n\nconst validateString = (val: any) => typeof val === 'string';\n\nconst validateUndefined = (val: any) => val === undefined;\n\nconst validateEmail = regexMatch(\n  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\nconst validatePhone = regexMatch(/^\\+[1-9]{1}[0-9]{3,14}$/);\nconst validateMinLength = (min: number) => (val: any) => val.length >= min;\n// const validatePlainObject = (val: any) => !!val && Object.getPrototypeOf(val) === Object.prototype;\nconst validatePathValue = (path: string, rules: Validator[]) => (val: any) =>\n  createValidation(...rules).validate(get(val, path));\n\nexport const isEmail = createValidator(\n  validateEmail,\n  '\"{val}\" is not a valid email'\n);\nexport const isPhone = createValidator(\n  validatePhone,\n  '\"{val}\" is not a valid phone number'\n);\nexport const isNotEmpty = createValidator(\n  validateMinLength(1),\n  'Minimum length is 1'\n);\nexport const isString = createValidator(\n  validateString,\n  'Input is not a string'\n);\n\nexport const isUndefined = createValidator(\n  validateUndefined,\n  'Input is defined'\n);\n\nexport const isStringOrUndefined = createOrValidator(\n  [isString(), isUndefined()],\n  'Input is not a string or undefined'\n);\n\n// export const isPlainObject = createValidator(validatePlainObject, 'Input is not a plain object');\nexport const hasPathValue = (path: string, rules: Validator[]) =>\n  createValidator(validatePathValue(path, rules))();\n","import { createOrValidator, createValidation } from './core';\nimport { Validator } from './types';\nimport {\n  isEmail,\n  isNotEmpty,\n  isPhone,\n  isString,\n  isStringOrUndefined,\n} from './validators';\n\n/**\n *\n * Validate that all of the validators passes\n * @params each parameter is an array of validators, those validators will be verified against the wrapped function argument which in the same place\n * @throws if any of the validators fails, an error with the relevant message will be thrown\n */\nexport const withValidations =\n  (...argsRules: Validator[][]) =>\n  <T extends Array<any>, U>(fn: (...args: T) => U) =>\n  (...args: T): U => {\n    argsRules.forEach((rulesArr, i) =>\n      createValidation(...rulesArr).validate(args[i])\n    );\n\n    return fn(...args);\n  };\n\nexport const string = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n];\n\nexport const isStringOrUndefinedValidator = (fieldName: string) => [\n  isStringOrUndefined(`\"${fieldName}\" must be string or undefined`),\n];\n\nexport const stringNonEmpty = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isNotEmpty(`\"${fieldName}\" must not be empty`),\n];\nexport const stringEmail = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isEmail(),\n];\nexport const stringPhone = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isPhone(),\n];\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport { ExchangeAccessKeyResponse, SdkResponse } from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst withExchangeValidations = withValidations(stringNonEmpty('accessKey'));\n\nconst withAccessKeys = (httpClient: HttpClient) => ({\n  exchange: withExchangeValidations(\n    (accessKey: string): Promise<SdkResponse<ExchangeAccessKeyResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.accessKey.exchange, {}, { token: accessKey })\n      )\n  ),\n});\n\nexport default withAccessKeys;\n","type DeviceInfo = {\n  webAuthnSupport?: boolean;\n};\n\ntype LastAuth = {\n  authMethod?: AuthMethod;\n  oauthProvider?: string;\n  name?: string;\n  loginId?: string;\n};\n\ntype RedirectAuth = {\n  callbackUrl: string;\n  codeChallenge: string;\n};\n\ntype AuthMethod =\n  | 'magiclink'\n  | 'enchantedlink'\n  | 'otp'\n  | 'totp'\n  | 'oauth'\n  | 'saml'\n  | 'webauthn';\n\nexport type SdkFn = (...args: any[]) => Promise<SdkResponse<ResponseData>>;\n\nexport type MaskedPhone = {\n  maskedPhone: string;\n};\n\nexport type MaskedEmail = {\n  maskedEmail: string;\n};\n\n/** User base details from Descope API */\nexport type User = {\n  email?: string;\n  name?: string;\n  givenName?: string;\n  middleName?: string;\n  familyName?: string;\n  phone?: string;\n};\n\n/** User extended details from Descope API */\nexport type UserResponse = User & {\n  loginIds: string[];\n  userId: string;\n  verifiedEmail?: boolean;\n  verifiedPhone?: boolean;\n  picture?: string;\n  roleNames?: string[];\n  userTenants?: UserTenant[];\n  createTime: number;\n  TOTP: boolean;\n  SAML: boolean;\n  OAuth?: Record<string, boolean>;\n  customAttributes?: Record<string, any>;\n  status: string;\n};\n\n/** A tenant association mapping  */\nexport type UserTenant = {\n  tenantId: string;\n  roleNames?: string[];\n  tenantName: string;\n};\n\n/** Login options to be added to the different authentication methods */\nexport type LoginOptions = {\n  stepup?: boolean;\n  mfa?: boolean;\n  customClaims?: Record<string, any>;\n};\n\n/** Authentication info result from the various JWT validations  */\nexport type JWTResponse = {\n  sessionJwt: string;\n  refreshJwt?: string;\n  cookieDomain?: string;\n  cookiePath?: string;\n  cookieMaxAge?: number;\n  cookieExpiration?: number;\n  user?: UserResponse;\n  firstSeen?: boolean;\n};\n\n/** Authentication info result from exchanging access keys for a session */\nexport type ExchangeAccessKeyResponse = {\n  keyId: string;\n  sessionJwt: string;\n  expiration: number;\n};\n\n/** The response returned from the various start webauthn functions */\nexport type WebAuthnStartResponse = {\n  transactionId: string;\n  options: string;\n  create: boolean;\n};\n\n/** Enchanted link response */\nexport type EnchantedLinkResponse = {\n  /** Pending reference URL to poll while waiting for user to click magic link */\n  pendingRef: string;\n  /** Link id, on which link the user should click */\n  linkId: string;\n  /** Email to which the link was sent to */\n  maskedEmail: string;\n};\n\n/** URL response to redirect user in case of OAuth or SSO */\nexport type URLResponse = {\n  url: string;\n};\n\n/** TOTP response with the TOTP details */\nexport type TOTPResponse = {\n  provisioningURL: string;\n  image: string;\n  key: string;\n};\n\n/** Password reset response with details according to response method */\nexport type PasswordResetResponse = {\n  resetMethod: string;\n  pendingRef?: string;\n  linkId?: string;\n  maskedEmail: string;\n};\n\n/** A subset of the password policy that can be checked on the client side for better UX */\nexport type PasswordPolicyResponse = {\n  minLength: number;\n  lowercase: boolean;\n  uppercase: boolean;\n  number: boolean;\n  nonAlphanumeric: boolean;\n};\n\n/** Phone delivery methods which are currently supported */\nexport enum DeliveryPhone {\n  sms = 'sms',\n  whatsapp = 'whatsapp',\n}\n\nexport enum DeliveryEmail {\n  email = 'email',\n}\n\n/** All delivery methods currently supported */\nexport type DeliveryMethods = DeliveryPhone | DeliveryEmail;\n\nexport const DeliveryMethods = {\n  ...DeliveryPhone,\n  ...DeliveryEmail,\n} as const;\n\n/** All flow execution statuses\n *  - waiting - flow execution is waiting for user interaction\n *  - running - flow execution is currently running\n *  - completed - flow execution completed successfully\n *  - failed - flow execution failed\n */\nexport enum FlowStatus {\n  waiting = 'waiting',\n  running = 'running',\n  completed = 'completed',\n  failed = 'failed',\n}\n\n/** All flow response action\n *  - screen - next action is to render  screen\n *  - poll - next action is poll for next after timeout\n *  - redirect - next action is to redirect (redirection details in 'redirect' attribute)\n *  - webauthnCreate/webauthnGet - next action is to prompt webauthn (details in 'webauthn' attribute)\n *  - none - no next action\n */\nexport type FlowAction =\n  | 'screen'\n  | 'poll'\n  | 'redirect'\n  | 'webauthnCreate'\n  | 'webauthnGet'\n  | 'none';\n\n/** Flow response with flow execution details */\nexport type FlowResponse = {\n  // current execution identifier\n  executionId: string;\n  // current step identifier\n  stepId: string;\n  // current step name\n  stepName: string;\n  // flow execution status\n  status: FlowStatus;\n  // the next required action\n  action: FlowAction;\n  // screen data - if action is 'screen'\n  screen?: {\n    // screen identifier\n    id: string;\n    // extra dynamic state required for rendering screen\n    state: Record<string, any>;\n  };\n  // redirect data - if action is 'redirect'\n  redirect?: {\n    url: string;\n  };\n  // SAML IDP response (this will be used to build the html form response goes from the IDP through the end user browser to the SP)\n  samlIdpResponse?: {\n    url: string;\n    samlResponse: string;\n    relayState: string;\n  };\n  // webauthn data - if action is one of 'webauthnCreate', 'webauthnGet'\n  webauthn?: {\n    transactionId: string;\n    options: string;\n    create: boolean;\n  };\n  // an error that occurred during flow execution, used for debugging / integrating\n  error?: {\n    code: string;\n    description: string;\n    message: string;\n  };\n  // authentication information response, if response is authenticated\n  authInfo?: JWTResponse;\n  lastAuth?: Pick<LastAuth, 'authMethod' | 'oauthProvider'>;\n};\n\nexport type Options = {\n  redirectUrl?: string;\n  location?: string;\n  tenant?: string;\n  deviceInfo?: DeviceInfo;\n  lastAuth?: LastAuth;\n  redirectAuth?: RedirectAuth;\n  oidcIdpStateId?: string;\n  preview?: boolean;\n  samlIdpStateId?: string;\n  samlIdpUsername?: string;\n  ssoAppId?: string;\n  abTestingKey?: number;\n  startOptionsVersion?: number;\n  client?: Record<string, any>;\n};\n\nexport type ResponseData = Record<string, any>;\n\n/**\n * Response from our SDK calls which includes the result (ok, code, error).\n * The relevant data is provided in the more specific interfaces extending SdkResponse.\n */\nexport type SdkResponse<T extends ResponseData> = {\n  code?: number;\n  ok: boolean;\n  response?: Response;\n  error?: {\n    errorCode: string;\n    errorDescription: string;\n    errorMessage?: string;\n    retryAfter?: string;\n  };\n  data?: T;\n};\n\n/** Different delivery method */\nexport type Deliveries<T extends Record<DeliveryMethods, SdkFn>> = {\n  [S in DeliveryMethods]: T[S];\n};\n\nexport type DeliveriesPhone<T extends Record<DeliveryPhone, SdkFn> | SdkFn> = {\n  [S in DeliveryPhone]: T extends Record<DeliveryPhone, SdkFn> ? T[S] : T;\n};\n\n/** Map different functions to email vs phone (sms, whatsapp) */\nexport type DeliveriesMap<EmailFn extends SdkFn, PhoneFn extends SdkFn> = {\n  [S in DeliveryMethods]: S extends 'email' ? EmailFn : PhoneFn;\n};\n\n/** Logger type that supports the given levels (debug, log, error) */\nexport type Logger = Pick<Console, 'debug' | 'log' | 'error' | 'warn'>;\n\nexport type UpdateOptions<T extends boolean> = {\n  addToLoginIDs?: T;\n  onMergeUseExisting?: T extends true ? boolean : never;\n};\n","import {\n  stringNonEmpty,\n  withValidations,\n  stringPhone,\n  stringEmail,\n} from '../validations';\n\nexport const loginIdValidations = stringNonEmpty('loginId');\nexport const withVerifyValidations = withValidations(stringNonEmpty('token'));\nexport const withSignValidations = withValidations(loginIdValidations);\nexport const withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef')\n);\nexport const withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone')\n);\nexport const withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email')\n);\n","import {\n  apiPaths,\n  ENCHANTED_LINK_MAX_POLLING_TIMEOUT_MS,\n  ENCHANTED_LINK_MIN_POLLING_INTERVAL_MS,\n} from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  SdkResponse,\n  JWTResponse,\n  EnchantedLinkResponse,\n  User,\n  LoginOptions,\n  UpdateOptions,\n} from '../types';\nimport { EnchantedLink, Routes, WaitForSessionConfig } from './types';\nimport {\n  withWaitForSessionValidations,\n  withSignValidations,\n  withVerifyValidations,\n  withUpdateEmailValidations,\n} from './validations';\n\n/** Polling configuration with defaults and normalizing checks */\nconst normalizeWaitForSessionConfig = ({\n  pollingIntervalMs = ENCHANTED_LINK_MIN_POLLING_INTERVAL_MS,\n  timeoutMs = ENCHANTED_LINK_MAX_POLLING_TIMEOUT_MS,\n} = {}) => ({\n  pollingIntervalMs: Math.max(\n    pollingIntervalMs || ENCHANTED_LINK_MIN_POLLING_INTERVAL_MS,\n    ENCHANTED_LINK_MIN_POLLING_INTERVAL_MS\n  ),\n  timeoutMs: Math.min(\n    timeoutMs || ENCHANTED_LINK_MAX_POLLING_TIMEOUT_MS,\n    ENCHANTED_LINK_MAX_POLLING_TIMEOUT_MS\n  ),\n});\n\nconst withEnchantedLink = (httpClient: HttpClient) => ({\n  verify: withVerifyValidations(\n    (token: string): Promise<SdkResponse<never>> =>\n      transformResponse(\n        httpClient.post(apiPaths.enchantedLink.verify, { token })\n      )\n  ),\n\n  signIn: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      loginOptions?: LoginOptions,\n      token?: string\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signIn, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            loginOptions,\n          },\n          { token }\n        )\n      )\n  ) as EnchantedLink[Routes.signIn],\n\n  signUpOrIn: withSignValidations(\n    (\n      loginId: string,\n      URI?: string\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signUpOrIn, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n          }\n        )\n      )\n  ) as EnchantedLink[Routes.signIn],\n\n  signUp: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      user?: User\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signUp, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            user,\n          }\n        )\n      )\n  ) as EnchantedLink[Routes.signUp],\n\n  waitForSession: withWaitForSessionValidations(\n    (\n      pendingRef: string,\n      config?: WaitForSessionConfig\n    ): Promise<SdkResponse<JWTResponse>> =>\n      new Promise((resolve) => {\n        const { pollingIntervalMs, timeoutMs } =\n          normalizeWaitForSessionConfig(config);\n        let timeout: NodeJS.Timeout | undefined;\n        const interval = setInterval(async () => {\n          const resp = await httpClient.post(apiPaths.enchantedLink.session, {\n            pendingRef,\n          });\n          if (resp.ok) {\n            clearInterval(interval);\n            if (timeout) clearTimeout(timeout);\n            resolve(transformResponse(Promise.resolve(resp)));\n          }\n        }, pollingIntervalMs);\n\n        timeout = setTimeout(() => {\n          resolve({\n            error: {\n              errorDescription: `Session polling timeout exceeded: ${timeoutMs}ms`,\n              errorCode: '0',\n            },\n            ok: false,\n          });\n          clearInterval(interval);\n        }, timeoutMs);\n      })\n  ),\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        URI?: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>\n      ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.enchantedLink.update.email,\n            { loginId, email, URI, ...updateOptions },\n            { token }\n          )\n        )\n    ),\n  },\n});\n\nexport default withEnchantedLink;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport { FlowResponse, Options, SdkResponse } from '../types';\nimport { stringNonEmpty, withValidations } from '../validations';\nimport { FlowInput } from './types';\n\nconst withStartValidations = withValidations(stringNonEmpty('flowId'));\nconst withNextValidations = withValidations(\n  stringNonEmpty('executionId'),\n  stringNonEmpty('stepId'),\n  stringNonEmpty('interactionId'),\n);\n\nconst withFlow = (httpClient: HttpClient) => ({\n  start: withStartValidations(\n    (\n      flowId: string,\n      options?: Options,\n      conditionInteractionId?: string,\n      interactionId?: string,\n      version?: number,\n      componentsVersion?: string,\n      input?: FlowInput,\n    ): Promise<SdkResponse<FlowResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.flow.start, {\n          flowId,\n          options,\n          conditionInteractionId,\n          interactionId,\n          version,\n          componentsVersion,\n          input,\n        }),\n      ),\n  ),\n  next: withNextValidations(\n    (\n      executionId: string,\n      stepId: string,\n      interactionId: string,\n      version?: number,\n      componentsVersion?: string,\n      input?: FlowInput,\n    ): Promise<SdkResponse<FlowResponse>> => {\n      return transformResponse(\n        httpClient.post(apiPaths.flow.next, {\n          executionId,\n          stepId,\n          interactionId,\n          version,\n          componentsVersion,\n          input,\n        }),\n      );\n    },\n  ),\n});\n\nexport default withFlow;\n","import {\n  stringNonEmpty,\n  withValidations,\n  stringPhone,\n  stringEmail,\n} from '../validations';\n\nexport const loginIdValidations = stringNonEmpty('loginId');\nexport const withVerifyValidations = withValidations(stringNonEmpty('token'));\nexport const withSignValidations = withValidations(loginIdValidations);\nexport const withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef')\n);\nexport const withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone')\n);\nexport const withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email')\n);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  DeliveryPhone,\n  SdkResponse,\n  JWTResponse,\n  User,\n  LoginOptions,\n  MaskedEmail,\n  UpdateOptions,\n} from '../types';\nimport { MagicLink, Routes } from './types';\nimport {\n  withSignValidations,\n  withVerifyValidations,\n  withUpdateEmailValidations,\n  withUpdatePhoneValidations,\n} from './validations';\n\nconst withMagicLink = (httpClient: HttpClient) => ({\n  verify: withVerifyValidations(\n    (token: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.magicLink.verify, { token }))\n  ),\n\n  signIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (\n          loginId: string,\n          URI?: string,\n          loginOptions?: LoginOptions,\n          token?: string\n        ) =>\n          transformResponse(\n            httpClient.post(\n              pathJoin(apiPaths.magicLink.signIn, delivery),\n              { loginId, URI, loginOptions },\n              { token }\n            )\n          )\n      ),\n    }),\n    {}\n  ) as MagicLink[Routes.signIn],\n\n  signUp: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, URI?: string, user?: User) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.magicLink.signUp, delivery), {\n              loginId,\n              URI,\n              user,\n            })\n          )\n      ),\n    }),\n    {}\n  ) as MagicLink[Routes.signUp],\n\n  signUpOrIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations((loginId: string, URI?: string) =>\n        transformResponse(\n          httpClient.post(pathJoin(apiPaths.magicLink.signUpOrIn, delivery), {\n            loginId,\n            URI,\n          })\n        )\n      ),\n    }),\n    {}\n  ) as MagicLink[Routes.signIn],\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        URI?: string,\n        token?: string,\n        updateOptions? : UpdateOptions<T>\n      ): Promise<SdkResponse<MaskedEmail>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.magicLink.update.email,\n            { loginId, email, URI, ...updateOptions },\n            { token }\n          )\n        )\n    ),\n    phone: Object.keys(DeliveryPhone).reduce(\n      (acc, delivery) => ({\n        ...acc,\n        [delivery]: withUpdatePhoneValidations(\n          <T extends boolean>(\n            loginId: string,\n            phone: string,\n            URI?: string,\n            token?: string,\n            updateOptions? : UpdateOptions<T>\n          ) =>\n            transformResponse(\n              httpClient.post(\n                pathJoin(apiPaths.magicLink.update.phone, delivery),\n                { loginId, phone, URI, ...updateOptions },\n                { token }\n              )\n            )\n        ),\n      }),\n      {}\n    ) as MagicLink[Routes.updatePhone],\n  },\n});\n\nexport default withMagicLink;\n","import { SdkResponse, URLResponse, JWTResponse, LoginOptions } from '../types';\n\nenum OAuthProviders {\n  facebook = 'facebook',\n  github = 'github',\n  google = 'google',\n  microsoft = 'microsoft',\n  gitlab = 'gitlab',\n  apple = 'apple',\n  discord = 'discord',\n  linkedin = 'linkedin',\n  slack = 'slack',\n}\n\ntype VerifyFn = (code: string) => Promise<SdkResponse<JWTResponse>>;\nexport type StartFn = (\n  redirectURL?: string,\n  loginOptions?: LoginOptions,\n  token?: string\n) => Promise<SdkResponse<URLResponse>>;\n\nexport type Providers<T> = Record<keyof typeof OAuthProviders, T>;\n\nexport type Oauth = {\n  start: Providers<StartFn>;\n  verify: Providers<VerifyFn>;\n};\n\nexport { OAuthProviders };\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { SdkResponse, JWTResponse, LoginOptions } from '../types';\nimport { transformResponse } from '../helpers';\nimport { Oauth, OAuthProviders } from './types';\nimport { stringNonEmpty, withValidations } from '../validations';\n\nconst withExchangeValidations = withValidations(stringNonEmpty('code'));\nconst withOauth = (httpClient: HttpClient) => ({\n  start: Object.assign(\n    (\n      provider: string,\n      redirectUrl?: string,\n      loginOptions?: LoginOptions,\n      token?: string\n    ) => {\n      return transformResponse(\n        httpClient.post(apiPaths.oauth.start, loginOptions || {}, {\n          queryParams: {\n            provider,\n            ...(redirectUrl && { redirectURL: redirectUrl }),\n          },\n          token,\n        })\n      );\n    },\n    Object.keys(OAuthProviders).reduce(\n      (acc, provider) => ({\n        ...acc,\n        [provider]: (\n          redirectUrl?: string,\n          loginOptions?: LoginOptions,\n          token?: string\n        ) =>\n          transformResponse(\n            httpClient.post(apiPaths.oauth.start, loginOptions || {}, {\n              queryParams: {\n                provider,\n                ...(redirectUrl && { redirectURL: redirectUrl }),\n              },\n              token,\n            })\n          ),\n      }),\n      {}\n    ) as Oauth['start']\n  ),\n  exchange: withExchangeValidations(\n    (code: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.oauth.exchange, { code }))\n  ),\n});\n\nexport default withOauth;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  User,\n  SdkResponse,\n  JWTResponse,\n  DeliveryPhone,\n  LoginOptions,\n  MaskedEmail,\n  UpdateOptions,\n} from '../types';\nimport {\n  stringEmail,\n  stringNonEmpty,\n  stringPhone,\n  withValidations,\n} from '../validations';\nimport { Otp, Routes } from './types';\n\nconst loginIdValidations = stringNonEmpty('loginId');\nconst withVerifyValidations = withValidations(\n  loginIdValidations,\n  stringNonEmpty('code')\n);\nconst withSignValidations = withValidations(loginIdValidations);\nconst withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone')\n);\nconst withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email')\n);\n\nconst withOtp = (httpClient: HttpClient) => ({\n  verify: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withVerifyValidations(\n        (loginId: string, code: string): Promise<SdkResponse<JWTResponse>> =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.verify, delivery), {\n              code,\n              loginId,\n            })\n          )\n      ),\n    }),\n    {}\n  ) as Otp[Routes.verify],\n\n  signIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, loginOptions?: LoginOptions, token?: string) =>\n          transformResponse(\n            httpClient.post(\n              pathJoin(apiPaths.otp.signIn, delivery),\n              { loginId, loginOptions },\n              { token }\n            )\n          )\n      ),\n    }),\n    {}\n  ) as Otp[Routes.signIn],\n\n  signUp: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations((loginId: string, user?: User) =>\n        transformResponse(\n          httpClient.post(pathJoin(apiPaths.otp.signUp, delivery), {\n            loginId,\n            user,\n          })\n        )\n      ),\n    }),\n    {}\n  ) as Otp[Routes.signUp],\n\n  signUpOrIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations((loginId: string) =>\n        transformResponse(\n          httpClient.post(pathJoin(apiPaths.otp.signUpOrIn, delivery), {\n            loginId,\n          })\n        )\n      ),\n    }),\n    {}\n  ) as Otp[Routes.signIn],\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        token?: string,\n        updateOptions? : UpdateOptions<T>\n      ): Promise<SdkResponse<MaskedEmail>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.otp.update.email,\n            { loginId, email, ...updateOptions },\n            { token }\n          )\n        )\n    ),\n    phone: Object.keys(DeliveryPhone).reduce(\n      (acc, delivery) => ({\n        ...acc,\n        [delivery]: withUpdatePhoneValidations(\n          <T extends boolean>(\n            loginId: string,\n            phone: string,\n            token?: string,\n            updateOptions? : UpdateOptions<T>\n          ) =>\n            transformResponse(\n              httpClient.post(\n                pathJoin(apiPaths.otp.update.phone, delivery),\n                { loginId, phone, ...updateOptions },\n                { token }\n              )\n            )\n        ),\n      }),\n      {}\n    ) as Otp[Routes.updatePhone],\n  },\n});\n\nexport default withOtp;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport { SdkResponse, URLResponse, JWTResponse, LoginOptions } from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst withStartValidations = withValidations(stringNonEmpty('tenant'));\nconst withExchangeValidations = withValidations(stringNonEmpty('code'));\n\nconst withSaml = (httpClient: HttpClient) => ({\n  start: withStartValidations(\n    (\n      tenantIdOrEmail: string,\n      redirectUrl?: string,\n      loginOptions?: LoginOptions,\n      token?: string\n    ): Promise<SdkResponse<URLResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.saml.start, loginOptions || {}, {\n          queryParams: { tenant: tenantIdOrEmail, redirectURL: redirectUrl },\n          token,\n        })\n      )\n  ),\n  exchange: withExchangeValidations(\n    (code: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.saml.exchange, { code }))\n  ),\n});\n\nexport default withSaml;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  User,\n  SdkResponse,\n  JWTResponse,\n  TOTPResponse,\n  LoginOptions,\n} from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst loginIdValidations = stringNonEmpty('loginId');\nconst withVerifyValidations = withValidations(\n  loginIdValidations,\n  stringNonEmpty('code')\n);\nconst withSignUpValidations = withValidations(loginIdValidations);\nconst withUpdateValidations = withValidations(loginIdValidations);\n\nconst withTotp = (httpClient: HttpClient) => ({\n  signUp: withSignUpValidations(\n    (loginId: string, user?: User): Promise<SdkResponse<TOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.totp.signUp, { loginId, user })\n      )\n  ),\n\n  verify: withVerifyValidations(\n    (\n      loginId: string,\n      code: string,\n      loginOptions?: LoginOptions,\n      token?: string\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.totp.verify,\n          { loginId, code, loginOptions },\n          { token }\n        )\n      )\n  ),\n\n  update: withUpdateValidations(\n    (loginId: string, token?: string): Promise<SdkResponse<TOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.totp.update, { loginId }, { token })\n      )\n  ),\n});\n\nexport default withTotp;\n","import { stringNonEmpty, withValidations } from '../validations';\n\nconst loginIdValidation = stringNonEmpty('loginId');\nconst newPasswordValidation = stringNonEmpty('newPassword');\nexport const withSignValidations = withValidations(\n  loginIdValidation,\n  stringNonEmpty('password')\n);\nexport const withSendResetValidations = withValidations(loginIdValidation);\nexport const withUpdateValidation = withValidations(\n  loginIdValidation,\n  newPasswordValidation\n);\nexport const withReplaceValidation = withValidations(\n  loginIdValidation,\n  stringNonEmpty('oldPassword'),\n  newPasswordValidation\n);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport {\n  withSignValidations,\n  withSendResetValidations,\n  withUpdateValidation,\n  withReplaceValidation,\n} from './validations';\nimport {\n  SdkResponse,\n  JWTResponse,\n  User,\n  PasswordResetResponse,\n  PasswordPolicyResponse,\n} from '../types';\n\nconst withPassword = (httpClient: HttpClient) => ({\n  signUp: withSignValidations(\n    (\n      loginId: string,\n      password: string,\n      user?: User\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.signUp, {\n          loginId,\n          password,\n          user,\n        })\n      )\n  ),\n\n  signIn: withSignValidations(\n    (loginId: string, password: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.signIn, {\n          loginId,\n          password,\n        })\n      )\n  ),\n\n  sendReset: withSendResetValidations(\n    (\n      loginId: string,\n      redirectUrl?: string\n    ): Promise<SdkResponse<PasswordResetResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.sendReset, { loginId, redirectUrl })\n      )\n  ),\n\n  update: withUpdateValidation(\n    (\n      loginId: string,\n      newPassword: string,\n      token?: string\n    ): Promise<SdkResponse<never>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.password.update,\n          {\n            loginId,\n            newPassword,\n          },\n          { token }\n        )\n      )\n  ),\n\n  replace: withReplaceValidation(\n    (\n      loginId: string,\n      oldPassword: string,\n      newPassword: string\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.replace, {\n          loginId,\n          oldPassword,\n          newPassword,\n        })\n      )\n  ),\n\n  policy: (): Promise<SdkResponse<PasswordPolicyResponse>> =>\n    transformResponse(httpClient.get(apiPaths.password.policy)),\n});\n\nexport default withPassword;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  SdkResponse,\n  ResponseData,\n  LoginOptions,\n  JWTResponse,\n  WebAuthnStartResponse,\n} from './types';\nimport { string, stringNonEmpty, withValidations } from './validations';\n\nconst loginIdStringValidations = string('loginId');\nconst loginIdNonEmptyValidations = stringNonEmpty('loginId');\nconst originValidations = stringNonEmpty('origin');\n\nconst withSignUpStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n  stringNonEmpty('name')\n);\nconst withSignUpOrInStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations\n);\nconst withSignInStartValidations = withValidations(\n  loginIdStringValidations,\n  originValidations\n);\nconst withUpdateStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n  stringNonEmpty('token')\n);\nconst withFinishValidations = withValidations(\n  stringNonEmpty('transactionId'),\n  stringNonEmpty('response')\n);\n\nconst withWebauthn = (httpClient: HttpClient) => ({\n  signUp: {\n    start: withSignUpStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        name: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUp.start, {\n            user: {\n              loginId,\n              name,\n            },\n            origin,\n          })\n        )\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string\n      ): Promise<SdkResponse<JWTResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUp.finish, {\n            transactionId,\n            response,\n          })\n        )\n    ),\n  },\n\n  signIn: {\n    start: withSignInStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        loginOptions?: LoginOptions,\n        token?: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.webauthn.signIn.start,\n            { loginId, origin, loginOptions },\n            { token }\n          )\n        )\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string\n      ): Promise<SdkResponse<JWTResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signIn.finish, {\n            transactionId,\n            response,\n          })\n        )\n    ),\n  },\n\n  signUpOrIn: {\n    start: withSignUpOrInStartValidations(\n      (\n        loginId: string,\n        origin: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUpOrIn.start, {\n            loginId,\n            origin,\n          })\n        )\n    ),\n  },\n\n  update: {\n    start: withUpdateStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        token: string\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.webauthn.update.start,\n            { loginId, origin },\n            { token }\n          )\n        )\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string\n      ): Promise<SdkResponse<ResponseData>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.update.finish, {\n            transactionId,\n            response,\n          })\n        )\n    ),\n  },\n});\n\nexport default withWebauthn;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport withAccessKeys from './accesskey';\nimport withEnchantedLink from './enchantedLink';\nimport withFlow from './flow';\nimport {\n  getTenants,\n  getJwtPermissions,\n  getJwtRoles,\n  isJwtExpired,\n  transformResponse,\n} from './helpers';\nimport withMagicLink from './magicLink';\nimport withOauth from './oauth';\nimport withOtp from './otp';\nimport withSaml from './saml';\nimport withTotp from './totp';\nimport withPassword from './password';\nimport { JWTResponse, UserResponse } from './types';\nimport {\n  stringNonEmpty,\n  withValidations,\n  isStringOrUndefinedValidator,\n} from './validations';\nimport withWebauthn from './webauthn';\nimport { isString, isStringOrUndefined } from './validations/validators';\n\nconst withJwtValidations = withValidations(stringNonEmpty('token'));\nconst withOptionalTokenValidations = withValidations(\n  isStringOrUndefinedValidator('token'),\n);\n\n/** Returns Descope SDK with all available operations */\nexport default (httpClient: HttpClient) => ({\n  accessKey: withAccessKeys(httpClient),\n  otp: withOtp(httpClient),\n  magicLink: withMagicLink(httpClient),\n  enchantedLink: withEnchantedLink(httpClient),\n  oauth: withOauth(httpClient),\n  saml: withSaml(httpClient),\n  totp: withTotp(httpClient),\n  webauthn: withWebauthn(httpClient),\n  password: withPassword(httpClient),\n  flow: withFlow(httpClient),\n  /**\n   * Refreshes a session token\n   * Should be called when a session has expired (failed validation) to renew it\n   * @param token A valid refresh token\n   * @returns The updated authentication info (JWTs)\n   */\n  refresh: withOptionalTokenValidations((token?: string) =>\n    transformResponse<JWTResponse>(\n      httpClient.post(apiPaths.refresh, {}, { token }),\n    ),\n  ),\n  /**\n   * Selects a tenant for the current session\n   * @param tenantId The tenant to select\n   * @param token A valid refresh token\n   * @returns The updated authentication info (JWTs). The session token will be updated with the selected tenant under the \"dct\" claim\n   */\n  selectTenant: withValidations(\n    [isString('tenantId')],\n    [isStringOrUndefined('\"token\" must be string or undefined')],\n  )((tenantId: string, token?: string) =>\n    transformResponse<JWTResponse>(\n      httpClient.post(apiPaths.selectTenant, { tenant: tenantId }, { token }),\n    ),\n  ),\n  /**\n   * Logs out the current session\n   * @param token A valid refresh token\n   */\n  logout: withOptionalTokenValidations((token?: string) =>\n    transformResponse<never>(httpClient.post(apiPaths.logout, {}, { token })),\n  ),\n  /**\n   * Logs out all sessions for the current user\n   * @param token A valid refresh token\n   */\n  logoutAll: withOptionalTokenValidations((token?: string) =>\n    transformResponse<never>(\n      httpClient.post(apiPaths.logoutAll, {}, { token }),\n    ),\n  ),\n  /**\n   * Returns the current user details\n   * @param token A valid refresh token\n   * @returns The current user details\n   */\n  me: withOptionalTokenValidations((token?: string) =>\n    transformResponse<UserResponse>(httpClient.get(apiPaths.me, { token })),\n  ),\n  /**\n   * Checks if the given JWT is still valid but DOES NOT check for signature\n   * @param token A valid token\n   * @returns true if the JWT is expired, false otherwise\n   */\n  isJwtExpired: withJwtValidations(isJwtExpired),\n  /**\n   * Returns the list of tenants in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @returns The list of tenants in the given JWT\n   */\n  getTenants: withJwtValidations(getTenants),\n  /**\n   * Returns the list of permissions granted in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @param tenant The tenant to check permissions for. If not provided, the permissions for the current tenant will be returned\n   * @returns The list of permissions granted in the given JWT\n   */\n  getJwtPermissions: withJwtValidations(getJwtPermissions),\n  /**\n   * Returns the list of roles specified in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @param tenant The tenant to check roles for. If not provided, the roles for the current tenant will be returned\n   * @returns The list of roles specified in the given JWT\n   */\n  getJwtRoles: withJwtValidations(getJwtRoles),\n  httpClient,\n});\n","import { DEFAULT_BASE_API_URL } from './constants';\nimport createHttpClient from './httpClient';\nimport { AfterRequest, BeforeRequest, Fetch, Hooks } from './httpClient/types';\nimport createSdk from './sdk';\nimport { Logger } from './sdk/types';\nimport { stringNonEmpty, withValidations } from './sdk/validations';\nimport { hasPathValue } from './sdk/validations/validators';\n\ntype SdkConfig = {\n  projectId: string;\n  logger?: Logger;\n  baseUrl?: string;\n  hooks?: Hooks;\n  cookiePolicy?: RequestCredentials | null;\n  baseHeaders?: HeadersInit;\n  fetch?: Fetch;\n};\n\n/** Validate we have non-empty project id */\nconst withSdkConfigValidations = withValidations([\n  hasPathValue('projectId', stringNonEmpty('projectId')),\n]);\n\n/** Add the ability to pass multiple hooks instead of one when creating an SDK instance */\nconst withMultipleHooks =\n  <T extends object>(createSdk: (config: SdkConfig) => T) =>\n  (\n    config: Omit<SdkConfig, 'hooks'> & {\n      hooks?: {\n        beforeRequest?: BeforeRequest | BeforeRequest[];\n        afterRequest?: AfterRequest | AfterRequest[];\n      };\n    }\n  ) => {\n    const beforeRequestHooks = [].concat(config.hooks?.beforeRequest || []);\n    const afterRequestHooks = [].concat(config.hooks?.afterRequest || []);\n\n    const beforeRequest: BeforeRequest = (config) =>\n      beforeRequestHooks?.reduce((acc, fn) => fn(acc), config);\n    const afterRequest: AfterRequest = async (req, res) => {\n      const results = await Promise.allSettled(\n        afterRequestHooks?.map((fn) => fn(req, res?.clone()))\n      );\n      // eslint-disable-next-line no-console\n      results.forEach(\n        (result) =>\n          result.status === 'rejected' && config.logger?.error(result.reason)\n      );\n    };\n\n    return createSdk({ ...config, hooks: { beforeRequest, afterRequest } });\n  };\n\n/** Descope SDK client */\nexport default withSdkConfigValidations(\n  withMultipleHooks(\n    ({\n      projectId,\n      logger,\n      baseUrl,\n      hooks,\n      cookiePolicy,\n      baseHeaders = {},\n      fetch,\n    }: SdkConfig) =>\n      createSdk(\n        createHttpClient({\n          baseUrl: baseUrl || DEFAULT_BASE_API_URL,\n          projectId,\n          logger,\n          hooks,\n          cookiePolicy,\n          baseConfig: { baseHeaders },\n          fetch,\n        })\n      )\n  )\n);\n","import createSdk from './createSdk';\nimport { HTTPMethods, RequestConfig } from './httpClient/types';\nimport { OAuthProviders } from './sdk/oauth/types';\nimport { DeliveryMethods } from './sdk/types';\n\n/** Descope SDK client with delivery methods enum.\n *\n * Please see full documentation at {@link https://docs.descope.com/guides Descope Docs}\n * @example Usage\n *\n * ```js\n * import descopeSdk from '@descope/core-js-sdk';\n *\n * const myProjectId = 'xxx';\n * const sdk = descopeSdk({ projectId: myProjectId });\n *\n * const userLoginId = 'loginId';\n * sdk.otp.signIn.email(userLoginId);\n * const jwtResponse = sdk.otp.verify.email(userIdentifier, codeFromEmail);\n * ```\n */\nexport default Object.assign(createSdk, { DeliveryMethods });\n\nexport { transformResponse } from './sdk/helpers';\nexport type {\n  EnchantedLinkResponse,\n  ExchangeAccessKeyResponse,\n  FlowAction,\n  FlowResponse,\n  FlowStatus,\n  JWTResponse,\n  ResponseData,\n  SdkResponse,\n  TOTPResponse,\n  URLResponse,\n  UserResponse,\n  LoginOptions,\n} from './sdk/types';\nexport * from './utils';\nexport { default as HttpStatusCodes } from './constants/httpStatusCodes';\nexport type { SdkFnWrapper } from './utils';\nexport type { HTTPMethods, RequestConfig };\n\n/** Type to restrict to valid delivery methods */\nexport type DeliveryMethod = keyof typeof DeliveryMethods;\n/** Type to restrict to valid OAuth providers */\nexport type OAuthProvider = keyof typeof OAuthProviders;\n","/* eslint-disable import/exports-last */\nimport { ResponseData } from '../../sdk/types';\nimport { SdkFnWrapper, ReplacePaths, SdkFnsPaths } from './types';\n\n/**\n * A wrapper function that allows to wrap multiple Sdk function\n * @param obj: The Sdk instance you want to wrap\n * @param paths: A readonly list of paths of the functions you want to wrap\n * @param wrapper: Your wrapper function, it should gets an Sdk function and return a new Sdk function\n * @returns a mutated instance of the Sdk with updated type definitions based on your wrapper return type\n *\n * Usage example:\n *\n * // Assuming this is our SDK instance\n * const sdk = {\n *    me: (token) => {...}\n *    flow: {\n *       start: (...params) => {...}\n *       next: (...params) => {...}\n *    }\n *    ...\n * }\n *\n * // This is our wrapper\n * const wrapper = (sdkFn) => async (...args) => {\n *    const sdkResponse = await sdkFn(...args)\n *\n *    // Modify return value\n *    return {...sdkResponse, data: {...sdkResponse.data, myCustomAttribute: 'hello'}}\n * }\n *\n * // And those are the paths we want to wrap\n * const paths = ['flow.start', 'flow.next'] as const // You MUST add as const!\n *\n * // We can wrap our SDK functions with the wrapper we created in this way\n * const newlyTypedSdk = wrapWith(sdk, paths, wrapper)\n *\n * Now the 2 wrapped functions will have the updated type based on the wrapper return value\n */\n\nconst wrapWith = <\n  Obj extends object,\n  Paths extends ReadonlyArray<SdkFnsPaths<Obj>>,\n  WrapperData extends ResponseData\n>(\n  obj: Obj,\n  paths: Paths,\n  wrapper: SdkFnWrapper<WrapperData>\n): ReplacePaths<Obj, Paths, WrapperData> => {\n  paths.forEach((path) => {\n    const sections = path.split('.');\n    let section = sections.shift();\n    let currentRef: Record<string, any> = obj;\n\n    while (sections.length > 0) {\n      currentRef = currentRef[section];\n\n      if (!section || !currentRef) {\n        throw Error(\n          `Invalid path \"${path}\", \"${section}\" is missing or has no value`\n        );\n      }\n\n      section = sections.shift();\n    }\n\n    if (typeof currentRef[section] !== 'function') {\n      throw Error(`\"${path}\" is not a function`);\n    }\n    const origFn = currentRef[section];\n    currentRef[section] = wrapper(origFn);\n  });\n\n  return obj as any;\n};\n\nexport default wrapWith;\n"],"names":["apiPaths","exchange","verify","signIn","signUp","update","email","phone","signUpOrIn","session","start","finish","sendReset","replace","policy","next","ENCHANTED_LINK_MIN_POLLING_INTERVAL_MS","ENCHANTED_LINK_MAX_POLLING_TIMEOUT_MS","httpLogBuilder","msg","headers","headersObj","entries","Object","fromEntries","Headers","JSON","stringify","this","body","Body","url","Url","toString","method","Method","title","Title","status","Status","build","keys","flatMap","key","join","createFetchLogger","logger","receivedFetch","fetchInternal","fetch","async","args","resp","respText","text","Promise","resolve","json","parse","clone","fetchWrapper","warn","Error","log","buildRequestLog","ok","respBody","statusText","buildResponseLog","HTTPMethods","mergeHeaders","sources","reduce","acc","source","srcArr","Array","isArray","from","getSrcArr","_","value","serializeBody","undefined","createAuthorizationHeader","projectId","token","bearer","Authorization","createHttpClient","baseUrl","baseConfig","hooks","cookiePolicy","fetchWithLogger","sendRequest","config","requestConfig","beforeRequest","path","queryParams","requestInit","baseHeaders","credentials","res","URL","search","URLSearchParams","urlBuilder","afterRequest","get","post","put","delete","HttpStatusCodes","TOO_MANY_REQUESTS","getJwtAuthorizationItems","tenant","claim","claims","parseJwt","_a","tenants","items","jwtDecode","isJwtExpired","exp","Date","getTime","getTenants","getJwtPermissions","getJwtRoles","pathJoin","transformResponse","response","transform","ret","code","data","error","assign","retryAfter","Number","parseInt","createValidator","rule","defaultMsg","val","createValidation","validators","validate","forEach","validator","errMsg","regexMatch","regex","test","validateEmail","validatePhone","isEmail","isPhone","isNotEmpty","min","length","isString","isUndefined","isStringOrUndefined","errors","filter","withValidations","argsRules","fn","rulesArr","i","stringNonEmpty","fieldName","stringEmail","stringPhone","withExchangeValidations","withAccessKeys","httpClient","accessKey","DeliveryPhone","DeliveryEmail","DeliveryMethods","FlowStatus","loginIdValidations","withVerifyValidations","withSignValidations","withWaitForSessionValidations","withUpdateEmailValidations","withEnchantedLink","loginId","URI","loginOptions","user","waitForSession","pendingRef","pollingIntervalMs","timeoutMs","Math","max","normalizeWaitForSessionConfig","timeout","interval","setInterval","clearInterval","clearTimeout","setTimeout","errorDescription","errorCode","updateOptions","withStartValidations","withNextValidations","withFlow","flowId","options","conditionInteractionId","interactionId","version","componentsVersion","input","executionId","stepId","withUpdatePhoneValidations","withMagicLink","delivery","OAuthProviders","withOauth","provider","redirectUrl","redirectURL","withOtp","withSaml","tenantIdOrEmail","withSignUpValidations","withUpdateValidations","withTotp","loginIdValidation","newPasswordValidation","withSendResetValidations","withUpdateValidation","withReplaceValidation","withPassword","password","newPassword","oldPassword","loginIdStringValidations","loginIdNonEmptyValidations","originValidations","withSignUpStartValidations","withSignUpOrInStartValidations","withSignInStartValidations","withUpdateStartValidations","withFinishValidations","withWebauthn","origin","name","transactionId","withJwtValidations","withOptionalTokenValidations","isStringOrUndefinedValidator","rules","createSdk","validatePathValue","withSdkConfigValidations","beforeRequestHooks","concat","afterRequestHooks","_b","req","allSettled","map","result","reason","withMultipleHooks","otp","magicLink","enchantedLink","oauth","saml","totp","webauthn","flow","refresh","selectTenant","tenantId","logout","logoutAll","me","index","obj","paths","wrapper","sections","split","section","shift","currentRef","origFn"],"mappings":"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"}